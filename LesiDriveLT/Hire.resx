<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABJRU5ErkJggg==
</value>
  </data>
</root>